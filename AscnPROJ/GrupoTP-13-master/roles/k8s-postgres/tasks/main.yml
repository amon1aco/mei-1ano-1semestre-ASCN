---
- name: Check if PostgreSQL Secret exists
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: default
    name: postgres-secret
  register: postgres_secret_info

- name: Create a Secret for PostgreSQL
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'postgres-secret.yml') | from_yaml }}"
    state: present
  tags: postgres
  when: postgres_secret_info.resources | length == 0

- name: Check if PostgreSQL PVC exists
  kubernetes.core.k8s_info:
    kind: PersistentVolumeClaim
    namespace: default
    name: postgres-pvc
  register: postgres_pvc_info

- name: Create a PVC for PostgreSQL
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'postgres-pvc.yml') | from_yaml }}"
    state: present
    wait: true
  when: postgres_pvc_info.resources | length == 0

- name: Check if PostgreSQL Deployment exists
  kubernetes.core.k8s_info:
    kind: Deployment
    namespace: default
    name: postgres
  register: postgres_deployment_info

- name: Create a Deployment for PostgreSQL
  kubernetes.core.k8s:
    definition: "{{ lookup('template', 'postgres-deployment.yml') | from_yaml }}"
    state: present
    wait: true
    wait_timeout: 500
  when: postgres_deployment_info.resources | length == 0

- name: Check if PostgreSQL Service exists
  kubernetes.core.k8s_info:
    kind: Service
    namespace: default
    name: postgres
  register: postgres_service_info

- name: Create a Service for exposing PostgreSQL
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'postgres-service.yml') | from_yaml }}"
    wait: true
  when: postgres_service_info.resources | length == 0

- name: Wait till PostgreSQL pod is created
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: default
    label_selectors:
      - app=postgres
    wait: true
    wait_sleep: 5
    wait_timeout: 500
  register: postgres_pod_info

# - name: Wait until PostgreSQL is ready to accept connections
#   kubernetes.core.k8s_exec:
#     namespace: default
#     pod: "{{ postgres_pod_info.resources[0].metadata.name }}"
#     command: psql -U {{ db_username }} -d {{ db_name }} -c "\l"
#   register: postgres_login
#   retries: 3
#   delay: 100
#   until: postgres_login.rc == 0
